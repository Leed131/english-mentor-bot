import discord
from discord.ext import commands
import os
import nest_asyncio

from langchain.chat_models import ChatOpenAI
from langchain.memory import ConversationBufferMemory
from langchain.prompts import PromptTemplate
from langchain.chains import ConversationChain

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏
nest_asyncio.apply()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–Ω—Ç–æ–≤
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ Render secrets
openai_api_key = os.getenv("OPENAI_API_KEY")

# –®–∞–±–ª–æ–Ω –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏ –æ—Ç–≤–µ—Ç–∞
template = """
You are an English tutor bot. The user is practicing English. 
If the user's message has grammatical or vocabulary mistakes, correct them and explain briefly.
Then answer the message in proper English as a conversation.

Correction example:
User: "I can to go" 
Bot: "You should say 'I can go'. 'to' is not needed here."

---

Chat history:
{history}

User: {input}
EnglishMentorBot:"""

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ LangChain
prompt = PromptTemplate(input_variables=["history", "input"], template=template)
memory = ConversationBufferMemory()
llm = ChatOpenAI(temperature=0.6, openai_api_key=openai_api_key)
conversation = ConversationChain(llm=llm, memory=memory, prompt=prompt)

# –ö–æ–º–∞–Ω–¥–∞-–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@bot.command()
async def hello(ctx):
    await ctx.send("Hi! I'm your English mentor bot ü§ñ. You can talk to me!")

# –û—Å–Ω–æ–≤–Ω–æ–π –¥–∏–∞–ª–æ–≥ ‚Äî –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@bot.event
async def on_message(message):
    if message.author == bot.user:
        return

    if message.content.startswith("!"):  # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –æ—Ç–¥–µ–ª—å–Ω–æ
        await bot.process_commands(message)
        return

    response = conversation.run(message.content)
    await message.channel.send(response)

# –ó–∞–ø—É—Å–∫
TOKEN = os.getenv("DISCORD_TOKEN")
bot.run(TOKEN)
