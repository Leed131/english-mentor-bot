import os
import discord
from discord.ext import commands
import nest_asyncio
nest_asyncio.apply()

from langchain.chat_models import ChatOpenAI
from langchain.memory import ConversationBufferMemory
from langchain.prompts import PromptTemplate
from langchain.chains import ConversationChain

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Discord intents
intents = discord.Intents.default()
intents.message_content = True
intents.messages = True

bot = commands.Bot(command_prefix="!", intents=intents)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
openai_api_key = os.environ["OPENAI_API_KEY"]
discord_token = os.environ["DISCORD_TOKEN"]

# –®–∞–±–ª–æ–Ω –æ–±—â–µ–Ω–∏—è
template = """
You are an English mentor. Always reply in English, clearly and helpfully.
Chat history:
{history}
User: {input}
EnglishMentorBot:"""

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ LangChain
prompt = PromptTemplate(input_variables=["history", "input"], template=template)
memory = ConversationBufferMemory()
llm = ChatOpenAI(openai_api_key=openai_api_key, temperature=0.6)

conversation = ConversationChain(llm=llm, memory=memory, prompt=prompt)

# –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
@bot.command()
async def hello(ctx):
    await ctx.send("Hi! I'm your English mentor bot ü§ñ. You can talk to me!")

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ–±—â–µ–Ω–∏—è
@bot.command()
async def ask(ctx, *, message: str):
    response = conversation.run(message)
    await ctx.send(response)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.run(discord_token)
